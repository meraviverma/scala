Setup details;
Function Programming mutability and immutability;
val and var;
type inference;
data types;
Unit datatype;
Tuples;
Expression
For Loops;
yield;
iterator guard;
value binding;
Functions;
Procedures;
VarArg Parameters;
Parameter Groups;
Type Parameters;
Methods and Operators;
function objects;
function literal;
Higher order functions;
Partially applied functions
Collection;
foreach;
map;
filter;
reduce
Expression blocks;
Statements;
if else expression;
Match expression;
String Interpolation;
for loops
Cons Method;
flatMap;
match on tuples;
Options monadic collection;
Class;
Constructors;
Private members;
Public Methods;
Functions Vs Methods;
Parameterized Constructor;
Auxilary Constructor;
Objects;
Companion Class and 
Object;
Objects Factory Design;
Case class;
unapply method;
Match expression on case class;

Lesson 1 - Introduction

Introduction to Scala
Creating a Scala Doc
Creating a Scala Project
The Scala REPL
Scala Documentation

Lesson 2 - Basic Object Oriented Programming

Classes
Immutable and Mutable Fields
Methods
Default and Named Arguments
Objects

Lesson 3 - Case Objects and Classes

Companion Objects
Case Classes and Case Objects
Apply and Unapply
Synthetic Methods
Immutability and Thread Safety

Lesson 4 - Collections

Collections overview
Sequences and Sets
Options
Tuples and Maps
Higher Order Functions


Lesson 5 - Idiomatic Scala

For expressions
Pattern Matching
Handling Options
Handling Failures
Handling Futures

2.1 Classes 
After completing this lesson, you should be able to:
● Create and instantiate classes in Scala
● Describe how arguments are passed to Scala class instances
● Outline the lifespan of class parameters in a Scala class instance

2.2. Immutable and Mutable Fields
After completing this lesson, you should be able to:
● Describe the difference between mutable and immutable fields
● Create fields in Scala classes
● Describe the difference between class parameters and fields
● Outline how to promote class parameters to fields

2.3. Methods
After completing this lesson, you should be able to:
● Implement methods in Scala
● Describe evaluation order of methods versus fields in Scala
● Outline how infix notation works in Scala

2.4. Default and Named Arguments
After completing this lesson, you should be able to:
● Utilize default argument values in Scala class constructors and methods
● Leverage named arguments to only pass certain values

2.5. Objects
After completing this lesson, you should be able to:
● Create Singleton objects in Scala
● Describe the difference between a class and an object in Scala
● Outline usages for objects in Scala applications
● Start a Scala application
