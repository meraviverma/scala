############# FUNCTIONS AND CLOSURES ###################

1) Private and Nested Methods : Nesting method inside other method
2)Function Literals
3)How function literals work
4)Higher order functions :function that produce other function
5)Place-holder syntax
6)Partial application of functions
7)closures : It is a special case of function literals
8)partial functions
9)Var Args in functions
10)Argument Expansion
11)Named and default parameter

Important Points:
>The default for fields and methods in a class in public
>There is no public key word there are protected and private keywords
>Methods and function are interchangeable, they can be used in the same way.

--------------------------------------------------
############### FUNCTION LITERAL ################
--------------------------------------------------

Methods and functions are interchangeable. They can be used in the same way.

scala> def multiplymethod(a:Int,b:Int):Int={a * b}
multiplymethod: (a: Int, b: Int)Int

scala> val  multiplyfunction:(Int,Int)=>Int=(a ,b)=>a *b
multiplyfunction: (Int, Int) => Int = $$Lambda$1187/1089646163@3f67d229

scala> def mult(a:Int,b:Int)=a*b
mult: (a: Int, b: Int)Int

scala> mult(1,2)
res15: Int = 2

scala> (a:Int,b:Int)=>a*b
res16: (Int, Int) => Int = $$Lambda$1188/963468403@5ac30b75

scala> res16(1,2)
res17: Int = 2

scala> val multfn=(a:Int,b:Int)=>a*b
multfn: (Int, Int) => Int = $$Lambda$1194/1913760569@3c1c984f

scala> multfn(2,3)
res18: Int = 6
--------Example----------------
scala> val x = List.range(1, 10)
x: List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9)

scala> val evens=x.filter((i:Int)=>i % 2 ==0)
evens: List[Int] = List(2, 4, 6, 8)

scala> val evens=x.filter(_%2==0)
evens: List[Int] = List(2, 4, 6, 8)

scala> evens.foreach((i:Int)=>println(i))
2
4
6
8

scala> evens.foreach(println(_))
2
4
6
8

scala> val myProduct:(Int,Int)=>Int=_*_
myProduct: (Int, Int) => Int = $$Lambda$847/1807433416@64b7719f

scala> myProduct(4,5)
res8: Int = 20

--------------------------------------------------
############### Anonymous FUNCTION Literal ################
--------------------------------------------------
scala functions are internally called with apply method.

scala> val nums=(1 to 5).toList
nums: List[Int] = List(1, 2, 3, 4, 5)

scala> nums.map(x=>x*x)
res19: List[Int] = List(1, 4, 9, 16, 25)

scala> nums.map(x=>x * 3)
res20: List[Int] = List(3, 6, 9, 12, 15)

scala> nums.map(x=> x%2 ==0)
res21: List[Boolean] = List(false, true, false, true, false)

scala calls the apply method on any object or instance followed immediately by parents
If we make a class or instance that overrides apply,that will be invoked by a
function call

scala> val fn1:(Int,Int)=>Int=(a,b)=>a+b
fn1: (Int, Int) => Int = $$Lambda$1249/614739613@2e008502

scala> val fn2=new Function2[Int,Int,Int]{
     | override def apply(a:Int,b:Int)=a+b
     | }
fn2: (Int, Int) => Int = <function2>

scala> fn1(2,3)
res22: Int = 5

scala> fn1.apply(2,3)
res23: Int = 5

scala> fn2(2,3)
res24: Int = 5

scala> fn2.apply(2,3)
res25: Int = 5

curried and tupled:
----------------------

Currying basically turns the function into something that only takes a single parameter
but may return another.

scala> val funcurried=fn1.curried
funcurried: Int => (Int => Int) = scala.Function2$$Lambda$1299/1824945879@6356da2e
scala> funcurried(2)(3)
res29: Int = 5

scala> funcurried.apply(2).apply(3)
res31: Int = 5

scala> val funtupled=fn1.tupled
funtupled: ((Int, Int)) => Int = scala.Function2$$Lambda$216/849776463@4e0a57d3

scala> val tup=(2,3)
tup: (Int, Int) = (2,3)

scala> funtupled(tup)
res30: Int = 5
--------------------------------------------------
############### PURE FUNCTION ################
--------------------------------------------------
In functional programming a pure function is one that:
• Has one or more input parameters
• Performs calculations using only the input parameters
• Returns a value
• Always returns the same value for the same input
• Does not use or affect any data outside the function
• Is not affected by any data outside the function

scala> def hi="hi"
hi: String

scala> hi
res0: String = hi

scala> def multiplier(x:Int,y:Int):Int={x * y}
multiplier: (x: Int, y: Int)Int

scala> multiplier(2,3)
res1: Int = 6

Syntax: Defining a Function
def <identifier>(<identifier>: <type>[, ... ]): <type> = <expression>

Syntax: Defining a Function with Empty Parentheses
def <identifier>()[: <type>] = <expression>

Syntax: Invoking a Function with an Expression Block
<function identifier> <expression block>

scala> def hi():String="hi"
hi: ()String

scala> def safeTime(s:String):String={
     | if(s == null) return null
     | s.trim()
     | }
safeTime: (s: String)String

--------------------------------------------------
############### PROCEDURES ################
--------------------------------------------------
A procedure is a function that doesn’t have a return value. Any function that ends with
a statement, such as a println() call, is also a procedure.

If you have a simple function without an explicit return type that ends with a statement, 
the Scala compiler will infer the return type of the function to be Unit, the lack of a value.

--------------------------------------------------
############### Recursive Functions ##############
--------------------------------------------------
A recursive function is one that may invoke itself, preferably with some type of parameter
or external condition that will be checked to avoid an infinite loop of function invocation.

scala> def power(x:Int,n:Int):Long={
     | if(n >= 1)x * power(x,n-1)
     | else 1
     | }
power: (x: Int, n: Int)Long

scala> power(2,8)
res10: Long = 256

scala> power(2,3)
res11: Long = 8

One problem with using recursive functions is running into the dreaded “Stack Overflow”
error, where invoking a recursive function too many times eventually uses up all
of the allocated stack space.

To prevent this scenario, the Scala compiler can optimize some recursive functions with
tail-recursion so that recursive calls do not use additional stack space.

With tailrecursion–
optimized functions, recursive invocation doesn’t create new stack space but
instead uses the current function’s stack space.

To mark a function as intended for tail-recursion, add the text @annotation.tailrec
before the function definition

----------------------------------------------------
############### What is tail-recursion ? ###########
----------------------------------------------------
import scala.annotation._
@tailrec over method call.

scala> @annotation.tailrec
     | def power(x: Int, n: Int): Long = {
     | if (n >= 1) x * power(x, n-1)
     | else 1
     | }
<console>:14: error: could not optimize @tailrec annotated method power: it contains a recursive call not in tail position
       if (n >= 1) x * power(x, n-1)
                     
Ah, the function couldn’t be optimized because the recursive call is not the last statement
in the function.

scala> @annotation.tailrec
     |  def power(x: Int, n: Int, t: Int = 1): Int = {
     |  if (n < 1) t
     | else power(x, n-1, x*t)
     |  }
power: (x: Int, n: Int, t: Int)Int

The “tailrec” annotation and successful compile guarantees that the function
will be optimized with tail-recursion, so that each successive call will not add more stack
frames.

scala will not compile unless it can be tile call optimized
into a WHILE Loop.

Example::
---------------
scala> def sum(num:Int,res:Int):Int={
     | if(num == 1)res
     | else sum(num -1,res + num)
     | }
sum: (num: Int, res: Int)Int

scala> sum(99999,1)
res3: Int = 704982704

scala> sum(999999,1)
res4: Int = 1783293664

scala> sum(9999999,1)
res5: Int = -2014260032

scala> import scala.annotation._
import scala.annotation._

scala> @tailrec
     | def sum(num:Int,res:Int):Int={
     | if(num == 1) res
     | else sum(num-1,res+num)
     | }
sum: (num: Int, res: Int)Int

scala> sum(99999,1)
res6: Int = 704982704

scala> sum(999999,1)
res7: Int = 1783293664

scala> sum(9999999,1)
res8: Int = -2014260032



----------------------------------------------------
############### Nested Functions ###############
----------------------------------------------------

defining an internal function inside another function

scala> def max(a:Int,b:Int,c:Int)={
     | def max(x:Int,y:Int)=if(x>y)x else y
     | max(a,max(b,c))
     | }
max: (a: Int, b: Int, c: Int)Int

scala> max(2,3,4)
res12: Int = 4

functions should be firstclass.
The term indicates that they are not only declared and invoked but can be used
in every segment of the language as just another data type.

object FactSeq{
           def factSeq(n:Int):List[Long]={
           @annotation.tailrec
            def factSeqInner(n:Int,acc:List[Long],ct:Int):List[Long]={
			if(ct > n) acc else
			factSeqInner(n,ct*acc.head :: acc,ct +1)
			}
			factSeqInner(n,List(1L),2)
           }}

FactSeq.factSeq(8)		   
----------------------------------------------------
############### Private Methods ? ###########
----------------------------------------------------
Private method market private and it will not become part
of the API that you can see from outside.

scala> object FactSeq{
           def factSeq(n:Int):List[Long]={
			factSeqInner(n,List(1L),2)
           }
           @annotation.tailrec
           private def factSeqInner(n:Int,acc:List[Long],ct:Int):List[Long]={
			if(ct > n) acc else
			factSeqInner(n,ct*acc.head :: acc,ct +1)
			}
           }
defined object FactSeq

scala> FactSeq.factSeq(8)
res12: List[Long] = List(40320, 5040, 720, 120, 24, 6, 2, 1)

scala> FactSeq.factSeq(8).reverse
res13: List[Long] = List(1, 2, 6, 24, 120, 720, 5040, 40320)

----------------------------------------------------
############### Higher-order functions ###############
----------------------------------------------------
Higher order functions take other functions as parameters or return a function as a result. 

>> If a function or a method doesn't take or return a function 	it's called first order.

If a method or function does not take or return another function, it is called a first order function.

High order function simply takes a parameter that is a function lateral
and this is the power of functional languages.

scala> val nums=(1 to 10).toList
nums: List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

scala> nums.map(x=>x*x)
res32: List[Int] = List(1, 4, 9, 16, 25, 36, 49, 64, 81, 100)

scala> nums.filter(x=>x < 4)
res33: List[Int] = List(1, 2, 3)

scala> nums.span(x=> x % 4 !=0)
res34: (List[Int], List[Int]) = (List(1, 2, 3),List(4, 5, 6, 7, 8, 9, 10))

scala> nums.partition(x=>x%4 != 0)
res35: (List[Int], List[Int]) = (List(1, 2, 3, 5, 6, 7, 9, 10),List(4, 8))

Example : map() reduce() filter()

This is possible because functions are first-class values in Scala.

Higher order function is a function that either takes a function as argument or returns a function. 
In other words we can say a function which works with function is called higher order function.

Functions that accept other functions as parameters and/or use functions as return values are known as higher-order functions.

two of the most famous higher-order functions, map() and reduce().

-------------- Example --------------------------
scala> val nums=(1 to 10).toList
nums: List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

scala> def compareNeighbors(xs: List[Int],compare:(Int,Int)=>Int):List[Int]={
     | for (pair <- xs.sliding(2))yield {
     | compare(pair(0),pair(1))
     | }
     | }.toList
compareNeighbors: (xs: List[Int], compare: (Int, Int) => Int)List[Int]

scala> compareNeighbors(nums,(a,b)=>a+b)
res36: List[Int] = List(3, 5, 7, 9, 11, 13, 15, 17, 19)

scala> compareNeighbors(List(4,1,7,3,4,8),(a,b)=>(a-b).abs)
res38: List[Int] = List(3, 6, 4, 1, 4)

abs -----> absolute value of the given signed integer value.

scala> val xs=(1 to 10).toList
xs: List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

scala> xs.sliding(3) foreach println
List(1, 2, 3)
List(2, 3, 4)
List(3, 4, 5)
List(4, 5, 6)
List(5, 6, 7)
List(6, 7, 8)
List(7, 8, 9)
List(8, 9, 10)

scala> xs.sliding(2) foreach println
List(1, 2)
List(2, 3)
List(3, 4)
List(4, 5)
List(5, 6)
List(6, 7)
List(7, 8)
List(8, 9)
List(9, 10)

It creates a sliding window of three items.

Example 2:
--------------
scala> val nums=(1 to 10).toList
nums: List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

scala> def compareNeighbors(xs:List[Int],compare:(Int,Int)=>Int):List[Int]={
     | for(pair <- xs.sliding(2))yield {
     | compare(pair(0),pair(1))
     | }
     | }.toList
compareNeighbors: (xs: List[Int], compare: (Int, Int) => Int)List[Int]

scala> compareNeighbors(nums,_+_)
res72: List[Int] = List(3, 5, 7, 9, 11, 13, 15, 17, 19)

scala> compareNeighbors(nums,(a,b)=>a + b)
res74: List[Int] = List(3, 5, 7, 9, 11, 13, 15, 17, 19)

---------------------------------------------

scala> val salary=List(10,20,30)
salary: List[Int] = List(10, 20, 30)

scala> val doublesal=(x:Int)=>x*2
doublesal: Int => Int = $$Lambda$1105/1125059683@25a52a60

scala> val newsalary=salary.map(doublesal)
newsalary: List[Int] = List(20, 40, 60)

or

val salaries = Seq(20000, 70000, 40000)
val newSalaries = salaries.map(x => x * 2) // List(40000, 140000, 80000)


or

val salaries = Seq(20000, 70000, 40000)
val newSalaries = salaries.map(_ * 2)

or

scala> def dsal(x:Int):Int={x*2}
dsal: (x: Int)Int

scala> val news=salary.map(dsal)
news: List[Int] = List(20, 40, 60)

-----------Example 1--------------
scala> def simpleOps(x:Int,y:Int,f:(Int,Int)=>Int)={
     | val m=x+2
     | val n=y+2
     | val p=f(m,n)
     | p*2
     | }
simpleOps: (x: Int, y: Int, f: (Int, Int) => Int)Int

scala> def sum(a:Int,b:Int)=a + b
sum: (a: Int, b: Int)Int

scala> simpleOps(4,5,sum)
res14: Int = 26

scala> simpleOps(4,5,(a:Int,b:Int)=>a+b)
res15: Int = 26

scala> simpleOps(4,5,_+_)
res16: Int = 26

scala> simpleOps(4,5,_*_)
res17: Int = 84

scala> simpleOps(4,5,_-_)
res18: Int = -2

scala> simpleOps(4,5,_/_)
res19: Int = 0

scala> simpleOps(4,5,_>_)
                      ^
       error: type mismatch;
        found   : Boolean
        required: Int
//This fails but how can we make that it doesn't fail.
We can take the use of type parameter to do so.

------ Generic function---
scala> def identify[T](s:T)=s
identify: [T](s: T)T

scala> identify("ram")
res21: String = ram

scala> identify(10)
res22: Int = 10

scala> identify(true)
res23: Boolean = true

-------- Example 2---------
scala> def simpleOps[A,B](x:A,y:A,f:(A,A)=>B)=f(x,y)
simpleOps: [A, B](x: A, y: A, f: (A, A) => B)B

scala> simpleOps[Int,Int](2,4,_+_)
res25: Int = 6

scala> simpleOps[Int,Int](2,4,_*_)
res26: Int = 8

scala> simpleOps[Int,Int](2,4,_-_)
res27: Int = -2

scala> simpleOps[Int,Boolean](2,4,_>_)
res28: Boolean = false

scala> simpleOps[Int,Int](2,4,_>_)
                               ^
       error: type mismatch;
        found   : Boolean
        required: Int

scala> simpleOps[Double,Double](2,4,_/_)
res30: Double = 0.5

-------- Eample 3---------
scala> def tripleOp(a:Int,b:Int,c:Int,f:(Int,Int,Int)=>Int)=f(a,b,c)
tripleOp: (a: Int, b: Int, c: Int, f: (Int, Int, Int) => Int)Int

scala> tripleOp(2,3,4,_+_*_)
res34: Int = 14

scala> tripleOp(2,3,4,_*_*_)
res35: Int = 24
----------------------------------------------------
########### Partial Application of functions #######
----------------------------------------------------
>> Not to be confused with Partial Functions
>>Basically partially filling the function.
>> we can partially leave all the item.

scala> val add3Nums=(a:Int,b:Int,c:Int)=>a+b+c
add3Nums: (Int, Int, Int) => Int = $$Lambda$1517/1948024403@659eb7df

scala> val add6and3=add3Nums(6,(_:Int),3)
add6and3: Int => Int = $$Lambda$1518/1973233194@11985afd

scala> add6and3(5)
res75: Int = 14

scala> def add3Method(a:Int,b:Int,c:Int)=a+b+c
add3Method: (a: Int, b: Int, c: Int)Int

scala> val add3functionv1=add3Method(_,_,_)
add3functionv1: (Int, Int, Int) => Int = $$Lambda$1533/507536444@928f4ca

scala> add3functionv1(1,2,3)
res76: Int = 6

----------------------------------------------------
########### Partial Application of functions #######
----------------------------------------------------
>	All the argument are not available to the function.
>	When you are applying function you don't have to pass values for all parameter defined by the function but you pass values only for some of the
parameter leaving the remaining ones blank.

scala> def finalBillCalculator(serviceCharge:Int,vat:Int,netBill:Double):Double={
     | netBill + (serviceCharge * netBill)/100+(vat*netBill)/100
     | }
finalBillCalculator: (serviceCharge: Int, vat: Int, netBill: Double)Double

scala> val myBillCalculator=finalBillCalculator(12,20,_:Double)
myBillCalculator: Double => Double = $$Lambda$1103/550351186@1142d377

scala> myBillCalculator(120)
res1: Double = 158.4



----------------------------------------------------
########### CLOSURES #######
----------------------------------------------------
A function whose return value depends on variable(s) declared outside it, is a closure.

>>Closures are a distinct subgroup
>>All closures are function literals,but not all function literal are closures
>>A closures is so called because it encloses around some other state than that passed in to the function as parameter.
>>Closures are subset of function literal.
>>What makes it a closure is that it encloses around some state in the scope from the scope surrounding



scala> var c=7
c: Int = 7
scala> val sum1=(a:Int,b:Int)=>(a+b)*c
sum1: (Int, Int) => Int = $$Lambda$1103/1497170291@4a0a93ce

scala> sum1(2,3)
res3: Int = 35sss

So, while ‘sum’ is trivially closed over itself, ‘sum1’ refers to ‘c’ every time we call it, and reads its current value. Let’s try changing the value of c:

scala> c=8
c: Int = 8
We changed ‘c’ from 7 to 8. Let’s try calling sum1 again:

scala> sum1(2,3)
res5: Int = 40

scala> val more=10
more: Int = 10

scala> val incByMore=(x:Int)=>x+more
incByMore: Int => Int = $$Lambda$1535/708793246@74048e7c

scala> incByMore(10)
res79: Int = 20

scala>

scala> var more = 10
more: Int = 10

scala> val incByMore=(x:Int)=>x+more
incByMore: Int => Int = $$Lambda$1536/1467737751@66089348

scala> incByMore(12)
res80: Int = 22

scala> more=100
more: Int = 100

scala> incByMore(12)
res81: Int = 112

Example::
------------------
scala> val serviceCharge:Double=14
serviceCharge: Double = 14.0


scala> val bill = (netBill:Double)=>netBill*(1+serviceCharge/100)
bill: Double => Double = $$Lambda$1093/942523415@3daf03d8

scala> bill(30)
res0: Double = 34.2

Ex1:
-----------
scala> class Cafe(val serviceCharge:Double){
     | val finalBill=(netBill:Double)=>netBill*(1+serviceCharge/100)
     | }
defined class Cafe

scala> val cityCafe=new Cafe(14)
cityCafe: Cafe = Cafe@11c88cca

scala> val beachCafe=new Cafe(20)
beachCafe: Cafe = Cafe@1a2ac487

scala> cityCafe.finalBill(30)
res1: Double = 34.2

scala> beachCafe.finalBill(30)
res2: Double = 36.0

----------------------------------------------------
################ Partial Functions #################
----------------------------------------------------
>>	Not to be confused with partially applied functions
>>	A PartialFunction[T,R] extends Function[T,R](which is idiomatically written T=>R)
>>	It can be used in place of any function1[T,R]
>>	Any block of code with case inside of {} is a Partial Function:
>>	The act of creating curly braces and then immediately following it by one or more case  defines a partial function in scala.
>>	curly braces followed by case that defines a partial function.
>>	Anything you see after curly braces case statement then it is a Partial Functions.

A partial function of type PartialFunction[A, B] is a unary function where the domain does not necessarily include all values of type A. The function isDefinedAt allows [you] to test dynamically if a value is in the domain of the function.


>> Partial function are only partially implemented.It doesnot cover every possible value of incoming parameter it can cater to only a subset 
of possible data that it has been defined for in scala partial function can be defined to query if a function can handle a particular value.

>> The main distinction between `PartialFunction` and [[scala.Function1]] is that the user of a `PartialFunction` may choose to do something different with input that is declared to be outside its domain.

>>	partial functions is with the collect method on collections’ classes. The collect method takes a partial function as input, and as its Scaladoc describes, collect “Builds a new collection by applying a partial function to all elements of this list on which the function is defined.”

The signature of the PartialFunction trait looks like this:

trait PartialFunction[-A, +B] extends (A) => B

Helper Function::
1) Collect
2) orElse
3) andThen

scala> val squareroot=new PartialFunction[Double,Double]{
     | def apply(x:Double)=Math.sqrt(x)
     | def isDefinedAt(x:Double)=x > 0
     | }
squareroot: PartialFunction[Double,Double] = <function1>


scala> squareroot.isDefinedAt(9)
res1: Boolean = true

scala> squareroot(9)
res2: Double = 3.0

scala> squareroot.isDefinedAt(-9)
res3: Boolean = false

Example::
---------------------------------------------
scala> val divide=new PartialFunction[Int,Int]{
     | def apply(x:Int)=42/x
     | def isDefinedAt(x:Int)=x !=0
     | }
divide: PartialFunction[Int,Int] = <function1>

scala> divide.isDefinedAt(1)
res4: Boolean = true

scala> if(divide.isDefinedAt(1)) divide(1)
res5: AnyVal = 42

scala> divide.isDefinedAt(0)
res6: Boolean = false


partial functions are often written using case statements:

scala> val divide2:PartialFunction[Int,Int]={
     | case d:Int if d != 0 => 42/d
     | }
divide2: PartialFunction[Int,Int] = <function1>

scala> divide2.isDefinedAt(0)
res7: Boolean = false

scala> divide2.isDefinedAt(1)
res8: Boolean = true

Although this code doesn’t explicitly implement the isDefinedAt method, it works exactly the same as the previous divide function definition:

scala> val f: PartialFunction[Int, Any] = { case _ => 1/0 }
f: PartialFunction[Int,Any] = <function1>

scala> f(5)
java.lang.ArithmeticException: / by zero
  at $anonfun$1.applyOrElse(<console>:11)
  at $anonfun$1.applyOrElse(<console>:11)
  at scala.runtime.AbstractPartialFunction.apply(AbstractPartialFunction.scala:34)
  ... 27 elided

scala> f.isDefinedAt(5)
res10: Boolean = true
------------------------------------------------------------

collect::
--------------------------
scala> val isEven:PartialFunction[Int,String]={
     | case x if x % 2 == 0 => x+" is even"
     | }
isEven: PartialFunction[Int,String] = <function1>

scala> val evennumber=sample collect isEven
evennumber: scala.collection.immutable.IndexedSeq[String] = Vector(2 is even, 4 is even, 6 is even, 8 is even, 10 is even)

the method collect can use isDefinedAt to select which members to collect

collect method is written to test the isDefinedAt method for each element it’s given. As a result, it doesn’t run the divide algorithm when the input value is 0 (but does run it for every other element).

scala> val divide:PartialFunction[Int,Int]={
     | case d: Int if d!= 0 => 42/d
     | }
divide: PartialFunction[Int,Int] = <function1>

scala> List(0,1,2) map{divide}
scala.MatchError: 0 (of class java.lang.Integer)
  at scala.PartialFunction$$anon$1.apply(PartialFunction.scala:254)
  at scala.PartialFunction$$anon$1.apply(PartialFunction.scala:252)
  at $anonfun$1.applyOrElse(<console>:12)
  at $anonfun$1.applyOrElse(<console>:11)
  at scala.runtime.AbstractPartialFunction$mcII$sp.apply$mcII$sp(AbstractPartialFunction.scala:34)
  at scala.runtime.AbstractPartialFunction$mcII$sp.apply(AbstractPartialFunction.scala:34)
  at scala.runtime.AbstractPartialFunction$mcII$sp.apply(AbstractPartialFunction.scala:26)
  at scala.collection.immutable.List.map(List.scala:272)
  ... 27 elided

scala> List(0,1,2) collect {divide}
res12: List[Int] = List(42, 21)


collect method work in other situations, such as passing it a List that contains a mix of data types, with a function that works only with Int values:

scala> List(42,"cat")collect{ case i:Int => i+1}
res0: List[Int] = List(43)

scala> List(42,"cat")map{ case i:Int => i+1}
scala.MatchError: cat (of class java.lang.String)
  at .$anonfun$res1$1(<console>:12)
  at .$anonfun$res1$1$adapted(<console>:12)
  at scala.collection.immutable.List.map(List.scala:276)
  ... 27 elided



--------------------------------------------------------

orElse : the method orElse allows chaining another partial function to handle input outside the declared domain
----------------
scala> val isOdd:PartialFunction[Int,String]={
     | case x if x % 2 == 1 => x+ " is Odd"
     | }
isOdd: PartialFunction[Int,String] = <function1>

scala> val number=sample map(isEven orElse isOdd )
number: scala.collection.immutable.IndexedSeq[String] = Vector(1 is Odd, 2is even, 3 is Odd, 4is even, 5 is Odd, 6is even, 7 is Odd, 8is even, 9 is Odd, 10is even)


---------------------------------------------------------------------


---------------------------------------------------------------------------
scala> val pf1:PartialFunction[Int,Int]={
     | case x:Int if x > 0 => x + x
     | case x => x * -1
     | }
pf1: PartialFunction[Int,Int] = <function1>

scala> val fn1:Int=>Int=pf1
fn1: Int => Int = <function1>

scala> val nums=(-5 to 5).toList
nums: List[Int] = List(-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5)

scala> nums.map(pf1)
res82: List[Int] = List(5, 4, 3, 2, 1, 0, 2, 4, 6, 8, 10)

------------- Example 2 ---------------
>>map may not be safe with a PartialFunction,but collect is:

scala> val pf2:PartialFunction[Int,Int]={
     | case x:Int if x > 0 => x +x
     | }
pf2: PartialFunction[Int,Int] = <function1>

scala> nums.map(pf2)
scala.MatchError: -5 (of class java.lang.Integer)
  at scala.PartialFunction$$anon$1.apply(PartialFunction.scala:255)
  at scala.PartialFunction$$anon$1.apply(PartialFunction.scala:253)
  at $anonfun$1.applyOrElse(<console>:11)
  at $anonfun$1.applyOrElse(<console>:11)
  at scala.runtime.AbstractPartialFunction$mcII$sp.apply$mcII$sp(AbstractPartialFunction.scala:34)
  at scala.runtime.AbstractPartialFunction$mcII$sp.apply(AbstractPartialFunction.scala:34)
  at scala.runtime.AbstractPartialFunction$mcII$sp.apply(AbstractPartialFunction.scala:26)
  at scala.collection.immutable.List.map(List.scala:282)
  ... 28 elided

scala> nums.collect(pf2)
res84: List[Int] = List(2, 4, 6, 8, 10)
---------------------------------------------------------
Partial - Applied function and currying function
---------------------------------------------------------
scala> def factor(x:Int,y:Int)=y%x ==0
factor: (x: Int, y: Int)Boolean

scala> val isEven=factor(5,_:Int)
isEven: Int => Boolean = $$Lambda$915/1084148278@1b06148b

scala> isEven(15)
res41: Boolean = true

------------------------------------------------------------------------
####################### currying function ##########################
-----------------------------------------------------------------------------
currying is the technique of translating the evaluation of a function that 
takes multiple arguments into evaluating a sequence of functions, each with a single argument.

grouping parameter is called currying

scala> def factor(x:Int)(y:Int)=y%x==0
factor: (x: Int)(y: Int)Boolean

scala> val isEven=factor(2)_
isEven: Int => Boolean = $$Lambda$916/1138060675@44473eed

scala> isEven(4)
res42: Boolean = true

----------Currying Function-------------
scala> def plainoldsum(x:Int,y:Int)=x+y
plainoldsum: (x: Int, y: Int)Int

scala> plainoldsum(1,2)
res0: Int = 3

scala> def curriedfunction(x:Int)(y:Int)=x+y
curriedfunction: (x: Int)(y: Int)Int

scala> curriedfunction(1)(2)
res1: Int = 3

scala> def first(x:Int)=(y:Int)=>x + y
first: (x: Int)Int => Int

scala> val second=first(1)
second: Int => Int = $$Lambda$1101/873249151@6a1568d6

scala> second(2)
res2: Int = 3


scala> val oneplus=curriedfunction(1)_
oneplus: Int => Int = $$Lambda$1113/1531506932@546ed2a0

scala> oneplus(2)
res3: Int = 3

scala>

----------------------------------------------------
Vararg Parameters
----------------------------------------------------
A function parameter that can match zero or more arguments from the caller.

vararg parameters, so you can define a function with a variable number of input arguments. The vararg parameter cannot be followed by a nonvararg
parameter because there would be no way to distinguish them.

Varag doesn’t need to be the only parameter to a method but it must be final parameter to a method
------------Example 1 -----------------------
scala> def sayHello(names:String*):Unit={
     | for(name <- names)println(s"Hello ,$name")
     | }
sayHello: (names: String*)Unit

scala> sayHello()

scala> sayHello("Fred")
Hello ,Fred

scala> sayHello("Fred","Julie","Kim")
Hello ,Fred
Hello ,Julie
Hello ,Kim

----------------------------------------------
-----------Example 2 -------------------------
scala> def greet(greeting:String,names:String*):Seq[String]={
     | for(name<-names)yield s"$greeting $name"
     | }
greet: (greeting: String, names: String*)Seq[String]

scala> greet("Yo","Ravi","Jitender","Steve")
res89: Seq[String] = ArrayBuffer(Yo Ravi, Yo Jitender, Yo Steve)

------------------Example 3----------------------------
Greeting List of Names.

scala> val name=List("Fred","Ravi","Steve")
name: List[String] = List(Fred, Ravi, Steve)

scala> greet("Yo",name:_*)
res90: Seq[String] = List(Yo Fred, Yo Ravi, Yo Steve)

----------------------------------------------
scala> def sum(items:Int*):Int={
     | var total=0
     | for(i <- items)total += i
     | total
     | }
sum: (items: Int*)Int

scala> sum(10,20)
res0: Int = 30

scala> sum(10,10,20)
res1: Int = 40

scala> def mul(items:Int*):Int={
     | var total=1
     | for(i<-items)total=i*total
     | total
     | }
mul: (items: Int*)Int

scala> mul(2,3,4)
res2: Int = 24

scala> mul(2,3,4,1)
res3: Int = 24

scala> mul(2,3,4,1,2)
res4: Int = 48


------------------------------------------
Lazy Evaluation
-----------------------------------------
>	values are not computed until needed.
>	Opposite to eager evaluation or strict evaluation
>	Lazy evaluation can also be used to resolve circular dependencies. 
>	lazy keyword in scala
>	Lazy evaluation allows "call by name" , passing an unevaluated expression.
>	scala support call-by-value or strict evaluation and call-by-name or lazy evaluation.

scala> val e={
     | println("evaluating")
     | 9
     | }
evaluating
e: Int = 9

scala> lazy val l={
     | println("evaluating")
     | 9
     | }
l: Int = <lazy>

scala> l
evaluating
res2: Int = 9

--------------------------------------
scala> class Eager{
     | val e={
     | println("evaluating eager")
     | 9
     | }
     | }
defined class Eager

scala> class lazyeager{
     | lazy val l={
     | println("evaluating lazy")
     | }
     | }
defined class lazyeager

scala> val x= new Eager()
evaluating eager
x: Eager = Eager@432448

scala> val y= new lazyeager()
y: lazyeager = lazyeager@29d29657

scala> y.l
evaluating lazy

--------------------------------------

Evaluate expression before calling. 5 
def method1(n:Int)
	method1(2+3)
	
This Method will pass the expression and leave to be lazy evaluated.	
def method2(n:=>Int)
		method2(2+3)

---------------- Example -----------------------
scala> def method1(n:Int){
     | println("method 1")
     | println(n)
     | }
method1: (n: Int)Unit

		
scala> def method2(n: =>Int){
     | println("Method 2")
     | println(n)
     | }
method2: (n: => Int)Unit

scala> val add=(a:Int,b:Int)=>{println("Add numbers"); a + b }
add: (Int, Int) => Int = $$Lambda$1092/421293587@68ea253b

scala> method1(add(3,4))
Add numbers
method 1
7

scala> method2(add(3,4))
Method 2
Add numbers
7

Difference between Val and Def
-----------------------------------
scala> val isEvenVal=(i:Int)=>i%2 == 0
isEvenVal: Int => Boolean = $$Lambda$1070/705957093@70716259

scala> def isEvenDef(i:Int)=i%2 == 0
isEvenDef: (i: Int)Boolean

scala> val xs=List(1,2,3,4)
xs: List[Int] = List(1, 2, 3, 4)

scala> xs.filter(isEvenVal)
res0: List[Int] = List(2, 4)

scala> xs.filter(isEvenDef)
res1: List[Int] = List(2, 4)


scala> val f:(Any)=>String={
     | case i:Int=>"Int"
     | case d:Double=>"Double"
     | case _=>"Other"
     | }
f: Any => String = $$Lambda$1241/91201775@5e278e25

scala> f(1)
res2: String = Int

scala> f(1d)
res3: String = Double

scala> f(1f)
res4: String = Other

scala> f("a")
res5: String = Other


`val` functions
---------------------------
val add=(a:Int,b:Int)=>a + b

scala> val add=(a:Int,b:Int)=>a+b
add: (Int, Int) => Int = $$Lambda$1085/1250315597@7d3691e1

A val function has these attributes:
>>	It is 100% correct to use the term “function” when referring to it.

`def` functions
-----------------------
What I call a “def function” looks like this:

scala> def addDef(a:Int,b:Int)=a+b
addDef: (a: Int, b: Int)Int

It has these attributes:

>>	It is not 100% correct to use the term “function” when referring to it. Technically, it is not a function.
>>	It is a method that needs to be defined within a class or object.

A sequence of cases in curly braces can be used anywhere a function literal can be used.

scala> List(1,2,3,4).filter({case i:Int=>i%2 == 0 })
res2: List[Int] = List(2, 4)

scala> List(1,2,3,4).filter(i=>i%2 == 0)
res3: List[Int] = List(2, 4)


scala> val misc=List("adam","alvin","scott")
misc: List[String] = List(adam, alvin, scott)

scala> misc.map({case s:String=>s.length > 4})
res4: List[Boolean] = List(false, true, true)
